import os
import csv
import random
import tensorflow as tf

# ------------------------
# 경로 설정 (필요 시 수정)
# ------------------------
CSV_PATH = r"C:\malware_sample\KIS_label.csv"      # CSV 파일
IMAGEAdaptive_DIR = r"C:\malware_sample\images\adaptive_images"
# IMAGE256_DIR = r"C:\malware_sample\images\image256" # 256x256 BMP 폴더
# IMAGE36_DIR  = r"C:\malware_sample\images\image36"  # 36x36 BMP 폴더

OUTPUT_TRAIN_Adaptive = r"C:\malware_sample\tfrecord\train_Adaptive.tfrecord"
OUTPUT_VAL_Adaptive   = r"C:\malware_sample\tfrecord\val_Adaptive.tfrecord"
# OUTPUT_TRAIN_256 = r"C:\malware_sample\tfrecord\train_256.tfrecord"
# OUTPUT_VAL_256   = r"C:\malware_sample\tfrecord\val_256.tfrecord"
# OUTPUT_TRAIN_36  = r"C:\malware_sample\tfrecord\train_36.tfrecord"
# OUTPUT_VAL_36    = r"C:\malware_sample\tfrecord\val_36.tfrecord"

TRAIN_VAL_RATIO = 0.8  # 예: 80% train, 20% val
SHUFFLE_DATA    = True # True면 CSV 행들을 셔플
# ------------------------

# ------------------------

def _int64_feature(value: int) -> tf.train.Feature:
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))

def _bytes_feature(value: bytes) -> tf.train.Feature:
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

def main():
    # 1) CSV 로드
    rows = []
    with open(CSV_PATH, "r", newline="", encoding="utf-8") as f:
        reader = csv.reader(f)
        for line in reader:
            # line: [hash_val, year, filename, label] (예상)
            if len(line) < 4:
                continue
            hash_val = line[0].strip()   # 예: 000A8BF8D27F...
            label_str = line[3].strip()  # '0' or '1'
            if label_str not in ["0", "1"]:
                continue
            rows.append((hash_val, label_str))

    if not rows:
        print("No valid rows found in CSV.")
        return

    # 2) 데이터 섞기
    if SHUFFLE_DATA:
        random.shuffle(rows)

    # 3) train/val 분리
    split_index = int(len(rows) * TRAIN_VAL_RATIO)
    train_rows = rows[:split_index]
    val_rows   = rows[split_index:]

    print(f"Total: {len(rows)}, Train: {len(train_rows)}, Val: {len(val_rows)}")

    # 4) TFRecord Writer 준비 (4개 파일)
    writer_train_Adaptive = tf.io.TFRecordWriter(OUTPUT_TRAIN_Adaptive)
    writer_val_Adaptive   = tf.io.TFRecordWriter(OUTPUT_VAL_Adaptive)
    # writer_train_256 = tf.io.TFRecordWriter(OUTPUT_TRAIN_256)
    # writer_val_256   = tf.io.TFRecordWriter(OUTPUT_VAL_256)
    # writer_train_36  = tf.io.TFRecordWriter(OUTPUT_TRAIN_36)
    # writer_val_36    = tf.io.TFRecordWriter(OUTPUT_VAL_36)


    train_count_Adaptive =0
    val_count_Adaptive = 0
    # train_count_256 =0
    # val_count_256 = 0
    # train_count_36 = 0
    # val_count_36 = 0

    # -------------------------------------------------------------
    # 공용 함수: (hash_val, label_str)를 받아 TFExample 생성
    # -------------------------------------------------------------
    def write_example_to_tfrecord(hash_val: str, label_str: str,
                                  img_dir: str, writer: tf.io.TFRecordWriter,
                                  counter_ref: list):
        """
        img_dir: 이미지 폴더(e.g. IMAGE256_DIR or IMAGE36_DIR)
        writer:  TFRecordWriter
        counter_ref: counter 변수를 리스트로 받아서 += 1 가능
        """
        bmp_path = os.path.join(img_dir, hash_val + ".bmp")
        if not os.path.isfile(bmp_path):
            return  # 파일 없으면 스킵

        label_int = int(label_str)
        # 이미지 파일 읽기
        with open(bmp_path, "rb") as f_img:
            img_data = f_img.read()

        features = {
            "image/encoded":   _bytes_feature(img_data),
            "image/hashval":   _bytes_feature(hash_val.encode("utf-8")),
            "image/class/label": _int64_feature(label_int)
        }
        example = tf.train.Example(features=tf.train.Features(feature=features))
        writer.write(example.SerializeToString())
        counter_ref[0] += 1  # 증가

    # ----------------------------
    # 5) train rows -> 2종 TFRecord
    # ----------------------------
    for (hash_val, label_str) in train_rows:
        # Adaptive
        write_example_to_tfrecord(hash_val, label_str,
                                  IMAGEAdaptive_DIR, writer_train_Adaptive, [train_count_Adaptive])
        train_count_Adaptive += 1  # (참고: 위 함수에서 counter_ref로 더 직접적으로 관리 가능)
        
        # # 256
        # write_example_to_tfrecord(hash_val, label_str,
        #                           IMAGE256_DIR, writer_train_256, [train_count_256])
        # train_count_256 += 1  # (참고: 위 함수에서 counter_ref로 더 직접적으로 관리 가능)

        # # 36
        # write_example_to_tfrecord(hash_val, label_str,
        #                           IMAGE36_DIR, writer_train_36, [train_count_36])
        # train_count_36 += 1

    # ----------------------------
    # 6) val rows -> 2종 TFRecord
    # ----------------------------
    for (hash_val, label_str) in val_rows:
        # Adaptive
        write_example_to_tfrecord(hash_val, label_str,
                                  IMAGEAdaptive_DIR, writer_val_Adaptive, [val_count_Adaptive])
        val_count_Adaptive += 1
        
        # # 256
        # write_example_to_tfrecord(hash_val, label_str,
        #                           IMAGE256_DIR, writer_val_256, [val_count_256])
        # val_count_256 += 1

        # # 36
        # write_example_to_tfrecord(hash_val, label_str,
        #                           IMAGE36_DIR, writer_val_36, [val_count_36])
        # val_count_36 += 1

    # 7) Writer 닫기
    writer_train_Adaptive.close()
    writer_val_Adaptive.close()
    # writer_train_256.close()
    # writer_val_256.close()
    # writer_train_36.close()
    # writer_val_36.close()

    print(f"train_Adaptive total images tried: {train_count_Adaptive}, file: {OUTPUT_TRAIN_Adaptive}")
    print(f"val_Adaptive   total images tried: {val_count_Adaptive},   file: {OUTPUT_VAL_Adaptive}")
    # print(f"train_256 total images tried: {train_count_256}, file: {OUTPUT_TRAIN_256}")
    # print(f"val_256   total images tried: {val_count_256},   file: {OUTPUT_VAL_256}")
    # print(f"train_36  total images tried: {train_count_36},  file: {OUTPUT_TRAIN_36}")
    # print(f"val_36    total images tried: {val_count_36},    file: {OUTPUT_VAL_36}")
    print("Done.")

if __name__ == "__main__":
    main()