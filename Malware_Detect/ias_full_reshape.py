import os
import math
import numpy as np
from PIL import Image

def adaptive_reshape_exe_to_bmp(file_path, output_bmp_path):
    """
    파일의 바이트 데이터를 읽어 적응형 리쉐이핑 방식으로 2D 배열로 변환한 후,
    그 결과를 BMP 이미지 파일로 저장합니다.
    
    변환 방식:
      - 파일 길이 N을 구함.
      - width = ceil(sqrt(N))
      - height = ceil(N / width)
      - 필요한 픽셀 수 (width*height)에 맞춰 부족한 부분은 0으로 패딩 후, 배열로 변환.
    """
    with open(file_path, "rb") as f:
        data = f.read()
    arr = np.frombuffer(data, dtype=np.uint8)
    N = arr.size
    if N == 0:
        raise ValueError(f"File is empty: {file_path}")
    
    width = int(math.ceil(math.sqrt(N)))
    height = int(math.ceil(N / width))
    required = width * height
    
    if arr.size < required:
        arr = np.pad(arr, (0, required - arr.size), mode='constant', constant_values=0)
    else:
        arr = arr[:required]
    
    img_array = arr.reshape((height, width))
    img = Image.fromarray(img_array, mode='L')
    img.save(output_bmp_path)
    print(f"Saved adaptive reshaped image: {output_bmp_path}")
    return output_bmp_path

def process_folder(input_folder, output_folder):
    """
    지정한 입력 폴더 내의 모든 파일을 적응형 리쉐이핑 방식으로 BMP 이미지로 변환하여
    output_folder에 저장합니다.
    
    저장 파일명: 원본 파일 이름에 ".bmp" 확장자를 추가.
    """
    os.makedirs(output_folder, exist_ok=True)
    files = os.listdir(input_folder)
    
    for filename in files:
        full_path = os.path.join(input_folder, filename)
        if os.path.isfile(full_path):
            # 파일명에 확장자가 없으므로 그대로 사용하고, 저장 시 ".bmp"를 추가
            out_file = os.path.join(output_folder, filename + ".bmp")
            try:
                adaptive_reshape_exe_to_bmp(full_path, out_file)
            except Exception as e:
                print(f"Error processing {filename}: {e}")

def main():
    # 입력 폴더: 변환할 파일들이 있는 폴더
    input_folder = r"C:\malware_sample\benign_dataset\\"
    # 출력 폴더: 변환된 BMP 이미지들이 저장될 폴더
    output_folder = r"C:\malware_sample\images\adaptive_images\\"
    
    process_folder(input_folder, output_folder)

if __name__ == "__main__":
    main()
